// Created by Omar Elsayed on 12 Jul 2018 3:56:20pm
// Copyright Â© 2018 Omar Elsayed. All rights reserved.

float random (in vec2 st) { 
    return fract(st.x * st.y *1.989* 57.881);

}

float noise (in vec2 st) {
    vec2 i = floor(st);
    vec2 f = fract(st);

    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));

    vec2 u = f * f * (3.0 - 2.0 * f);

    return mix(a, b, u.x) + 
            (c - a)* u.y * (1.0 - u.x) + 
            (d - b) * u.x * u.y;
}

float fbm (in vec2 st) {

  return 0.6 * noise(st);
}

float flow ( vec2 p, float time ) {


  vec2 q = vec2( fbm( p + vec2(0.0,0.0) - vec2(0.0, time * 3.0)));

  vec2 r = vec2( fbm( p + 4.0 *  q + vec2(1.7,9.2) - vec2(0.0, time * 3.0)),
                 fbm( p + 4.0 * q + vec2(8.3,2.8) -  vec2(0.0, time * 3.0)) );

  return 0.35 + fbm( p + 4.0 * r );
}

vec2 wrap( vec2 st ) {

    if(st.x <= 0.0) st.x = abs(st.x);
    else if(st.x >= 1.0) st.x = 1.0 - fract(st.x);
    if(st.y <= 0.0) st.y = abs(st.y);
    else if(st.y >= 1.0) st.y = 1.0 - fract(st.y);

    return st;
}

kernel vec4 apply (sampler src, float time, float seed, float decay) {

    vec2 uv = destCoord() / samplerSize(src);

    float intensity = sin(time * 3.14159);
    intensity = 0.25 * clamp(intensity, 0., 1.);
    //0.5 * clamp(1.0 - pow(time * decay, 2.0), 0., 1.);
    
    float warp = flow((vec2(1.25, 2.5) * uv + vec2(seed)), time);

    vec2 p = uv + intensity * vec2(warp - 0.5);

    p = wrap(p);

    vec4 outputColor = sample(src, samplerTransform(src, p * samplerSize(src)));

    return outputColor;
}